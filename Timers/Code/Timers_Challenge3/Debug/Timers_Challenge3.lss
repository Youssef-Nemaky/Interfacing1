
Timers_Challenge3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006d0  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>

void TIMER0_setDuttyCycle(uint8_t x);
void TIMER0_init(void);

int main(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
    TIMER0_init();
  74:	0e 94 3d 00 	call	0x7a	; 0x7a <TIMER0_init>
  78:	ff cf       	rjmp	.-2      	; 0x78 <main+0xc>

0000007a <TIMER0_init>:

    }
}

/* A function to initialize Timer0 in FAST PWM mode */
void TIMER0_init(void){
  7a:	df 93       	push	r29
  7c:	cf 93       	push	r28
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
    /* 1) a PWM mode -> Clear Force output Compare FOC0.
       2) FAST PWM mode -> Set WGM00 & WGM01 bits. 
       3) Clear OC0 on compare match, set OC0 at BOTTOM (Non-Inverting) -> Clear COM00 & Set COM01 bits.
       4) prescaler F_CPU/8 -> Set CS01 & Clear CS00 and CS02.
    */
    TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
  82:	e3 e5       	ldi	r30, 0x53	; 83
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	8a e6       	ldi	r24, 0x6A	; 106
  88:	80 83       	st	Z, r24

    /* Make OCR0(PB3) pin output */
    DDRB |= (1<<PB3);
  8a:	a7 e3       	ldi	r26, 0x37	; 55
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e7 e3       	ldi	r30, 0x37	; 55
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	88 60       	ori	r24, 0x08	; 8
  96:	8c 93       	st	X, r24
    /* Set Dutty Cycle */
    TIMER0_setDuttyCycle(128);
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	0e 94 52 00 	call	0xa4	; 0xa4 <TIMER0_setDuttyCycle>
}   
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <TIMER0_setDuttyCycle>:

void TIMER0_setDuttyCycle(uint8_t x){
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	0f 92       	push	r0
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = x;
  b0:	ec e5       	ldi	r30, 0x5C	; 92
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	80 83       	st	Z, r24
}
  b8:	0f 90       	pop	r0
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
